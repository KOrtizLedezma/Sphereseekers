[gd_scene load_steps=3 format=3 uid="uid://cuwehbjyp3ij4"]

[sub_resource type="GDScript" id="GDScript_uompn"]
script/source = "extends RigidBody3D

@export var return_position: Vector3
@export var speed: float = 20.0

func _ready():
	global_transform.origin = return_position

	gravity_scale = 0.0

	sleeping = true

func shoot(direction: Vector3):
	sleeping = false
	linear_velocity = direction * speed

func _integrate_forces(state):
	if global_transform.origin.distance_to(return_position) > 500:
		reset_position()

func _on_collision(body: Node):
	if body and body.has_method(\"handle_collision\"):
		body.handle_collision()  # Call a custom collision handler on the other object
	reset_position()

func reset_position():
	global_transform.origin = return_position
	linear_velocity = Vector3.ZERO
	sleeping = true
"

[sub_resource type="SphereShape3D" id="SphereShape3D_jqmle"]

[node name="Ball" type="Node3D"]

[node name="RigidBody3D" type="RigidBody3D" parent="."]
script = SubResource("GDScript_uompn")

[node name="CollisionShape3D" type="CollisionShape3D" parent="RigidBody3D"]
shape = SubResource("SphereShape3D_jqmle")

[node name="MeshInstance3D" type="MeshInstance3D" parent="RigidBody3D"]

[connection signal="body_entered" from="RigidBody3D" to="RigidBody3D" method="_on_collision"]
